$
program
#
->
26
[ ] ( ) { } , ; + =
< > <= >= == != - * / id
if else num int void while return

program -> declaration-list

declaration-list -> declaration-list declaration
declaration-list -> declaration

declaration -> var-declaration
declaration -> fun-declaration

var-declaration -> type-specifier id ;
var-declaration -> type-specifier id [ num ] ;

type-specifier -> int
type-specifier -> void

fun-declaration -> type-specifier id ( params )
fun-declaration -> compound-stmt

params -> param-list
params -> void

param-list -> param-list , param
param-list -> param

param -> type-specifier id
param -> type-specifier id [ ]

compound-stmt -> { local-declarations statement-list }

local-declarations -> local-declarations var-declaration
local-declarations -> $

statement-list -> statement-list statement
statement-list -> $

statement -> matched-stmt
statement -> open-selection-stmt

matched-stmt -> expression-stmt
matched-stmt -> compound-stmt
matched-stmt -> matched-selection-stmt
matched-stmt -> return-stmt
matched-stmt -> iteration-stmt

matched-selection-stmt -> if ( expression ) matched-stmt else matched-stmt

open-selection-stmt -> if ( expression ) statement
open-selection-stmt -> if ( expression ) matched-stmt else open-selection-stmt

expression-stmt -> expression ;
expression-stmt -> ;



iteration-stmt -> while ( expression ) statement

return-stmt -> return ;
return-stmt -> return expression ;

expression -> var = expression
expression -> simple-expression

var -> id
var -> id [ expression ]

simple-expression -> additive-expression relop additive-expression
simple-expression -> additive-expression

relop -> <=
relop -> <
relop -> >
relop -> >=
relop -> ==
relop -> !=

additive-expression -> additive-expression addop term
additive-expression -> term

addop -> +
addop -> -

term -> term mulop factor
term -> factor

mulop -> *
mulop -> /

factor -> ( expression )
factor -> var
factor -> call
factor -> num

call -> id ( args )

args -> arg-list
args -> $

arg-list -> arg-list , expression
arg-list -> expression