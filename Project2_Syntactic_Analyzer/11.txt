$
S'
#
:=
83
int_const char_const float_const id string complex_const ( ) { }
[ ] ; , < > <= >= << >>
<<= >>= . ... - + -= += ++ --
-> & | && || &= |= ~ : ?
^ / % = * ! ^= /= %= ==
*= != break continue return case char int if switch
for void float double short long unsigned signed do while
else sizeof goto default struct union const volatile typedef static
auto register extern

S' := translation_unit

translation_unit := external_decl
translation_unit := translation_unit external_decl

external_decl := function_definition
external_decl := decl

function_definition := decl_specs declarator decl_list compound_stat
function_definition := declarator decl_list compound_stat
function_definition := decl_specs declarator compound_stat
function_definition := declarator compound_stat

decl := decl_specs init_declarator_list ;
decl := decl_specs ;

decl_list := decl
decl_list := decl_list decl

decl_specs := storage_class_spec decl_specs
decl_specs := storage_class_spec
decl_specs := type_spec decl_specs
decl_specs := type_spec
decl_specs := type_qualifier decl_specs
decl_specs := type_qualifier

storage_class_spec := auto
storage_class_spec := register
storage_class_spec := static
storage_class_spec := extern
storage_class_spec := typedef

type_spec := void
type_spec := char
type_spec := short
type_spec := int
type_spec := long
type_spec := float
type_spec := double
type_spec := signed
type_spec := unsigned
type_spec := struct_or_union_spec
type_spec := enum_spec
type_spec := typedef_name

type_qualifier := const
type_qualifier := volatile

struct_or_union_spec := struct_or_union id { struct_decl_list }
struct_or_union_spec := struct_or_union { struct_decl_list }
struct_or_union_spec := struct_or_union id

struct_or_union := struct
struct_or_union := union

struct_decl_list := struct_decl
struct_decl_list := struct_decl_list struct_decl

init_declarator_list := init_declarator
init_declarator_list := init_declarator_list , init_declarator

init_declarator := declarator
init_declarator := declarator = initializer

struct_decl := spec_qualifier_list struct_declarator_list ;

spec_qualifier_list := type_spec spec_qualifier_list
spec_qualifier_list := type_spec
spec_qualifier_list := type_qualifier spec_qualifier_list
spec_qualifier_list := type_qualifier

struct_declarator_list := struct_declarator
struct_declarator_list := struct_declarator_list , struct_declarator

struct_declarator := declarator
struct_declarator := declarator : const_exp
struct_declarator := : const_exp

declarator := pointer direct_declarator
declarator := direct_declarator

direct_declarator := id
direct_declarator := ( declarator )
direct_declarator := direct_declarator [ const_exp ]
direct_declarator := direct_declarator [ ]
direct_declarator := direct_declarator ( param_type_list )
direct_declarator := direct_declarator ( id_list )
direct_declarator := direct_declarator ( )

pointer := * type_qualifier_list
pointer := *
pointer := * type_qualifier_list pointer
pointer := * pointer

type_qualifier_list := type_qualifier
type_qualifier_list := type_qualifier_list type_qualifier

param_type_list := param_list
param_type_list := param_list , ...

param_list := param_decl
param_list := param_list , param_decl

param_decl := decl_specs declarator
param_decl := decl_specs abstract_declarator
param_decl := decl_specs

id_list := id
id_list := id_list , id

initializer := assignment_exp
initializer := { initializer_list }
initializer := { initializer_list , }

initializer_list := initializer
initializer_list := initializer_list , initializer

type_name := spec_qualifier_list abstract_declarator
type_name := spec_qualifier_list

abstract_declarator := pointer
abstract_declarator := pointer direct_abstract_declarator
abstract_declarator := direct_abstract_declarator

direct_abstract_declarator := ( abstract_declarator )
direct_abstract_declarator := direct_abstract_declarator [ const_exp ]
direct_abstract_declarator := [ const_exp ]
direct_abstract_declarator := direct_abstract_declarator [ ]
direct_abstract_declarator := [ ]
direct_abstract_declarator := direct_abstract_declarator ( param_type_list )
direct_abstract_declarator := ( param_type_list )
direct_abstract_declarator := direct_abstract_declarator ( )
direct_abstract_declarator := ( )

typedef_name := id

stat := matched_stat
stat := open_stat

matched_stat := selection_matched_stat
matched_stat := labeled_stat
matched_stat := exp_stat
matched_stat := compound_stat
matched_stat := iteration_stat
matched_stat := jump_stat

labeled_stat := id : matched_stat
labeled_stat := case const_exp : matched_stat
labeled_stat := default : matched_stat

exp_stat := exp ;
exp_stat := ;

compound_stat := { decl_list stat_list }
compound_stat := { stat_list }
compound_stat := { decl_list }
compound_stat := { }

stat_list := matched_stat
stat_list := stat_list matched_stat

selection_matched_stat := if ( exp ) matched_stat else matched_stat
selection_matched_stat := switch ( exp ) matched_stat

open_stat := if ( exp ) stat
open_stat := if ( exp ) matched_stat else open_stat

iteration_stat := while ( exp ) matched_stat
iteration_stat := do matched_stat while ( exp ) ;
iteration_stat := for ( exp ; exp ; exp ) matched_stat
iteration_stat := for ( exp ; exp ; ) matched_stat
iteration_stat := for ( exp ; ; exp ) matched_stat
iteration_stat := for ( exp ; ; ) matched_stat
iteration_stat := for ( ; exp ; exp ) matched_stat
iteration_stat := for ( ; exp ; ) matched_stat
iteration_stat := for ( ; ; exp ) matched_stat
iteration_stat := for ( ; ; ) matched_stat

jump_stat := goto id ;
jump_stat := continue ;
jump_stat := break ;
jump_stat := return exp ;
jump_stat := return ;

exp := assignment_exp
exp := exp , assignment_exp

assignment_exp := conditional_exp
assignment_exp := unary_exp assignment_operator assignment_exp

assignment_operator := =
assignment_operator := *=
assignment_operator := /=
assignment_operator := %=
assignment_operator := +=
assignment_operator := -=
assignment_operator := <<=
assignment_operator := >>=
assignment_operator := &=
assignment_operator := ^=
assignment_operator := |=

conditional_exp := logical_or_exp
conditional_exp := logical_or_exp ? exp : conditional_exp

const_exp := conditional_exp

logical_or_exp := logical_and_exp
logical_or_exp := logical_or_exp || logical_and_exp

logical_and_exp := inclusive_or_exp
logical_and_exp := logical_and_exp && inclusive_or_exp

inclusive_or_exp := exclusive_or_exp
inclusive_or_exp := inclusive_or_exp | exclusive_or_exp

exclusive_or_exp := and_exp
exclusive_or_exp := exclusive_or_exp ^ and_exp

and_exp := equality_exp
and_exp := and_exp & equality_exp

equality_exp := relational_exp
equality_exp := equality_exp == relational_exp
equality_exp := equality_exp != relational_exp

relational_exp := shift_expression
relational_exp := relational_exp < shift_expression
relational_exp := relational_exp > shift_expression
relational_exp := relational_exp <= shift_expression
relational_exp := relational_exp >= shift_expression

shift_expression := additive_exp
shift_expression := shift_expression << additive_exp
shift_expression := shift_expression >> additive_exp

additive_exp := mult_exp
additive_exp := additive_exp + mult_exp
additive_exp := additive_exp - mult_exp

mult_exp := cast_exp
mult_exp := mult_exp * cast_exp
mult_exp := mult_exp / cast_exp
mult_exp := mult_exp % cast_exp

cast_exp := unary_exp
cast_exp := ( type_name ) cast_exp

unary_exp := postfix_exp
unary_exp := ++ unary_exp
unary_exp := -- unary_exp
unary_exp := unary_operator cast_exp
unary_exp := sizeof unary_exp
unary_exp := sizeof ( type_name )

unary_operator := &
unary_operator := *
unary_operator := +
unary_operator := -
unary_operator := ~
unary_operator := !

postfix_exp := primary_exp
postfix_exp := postfix_exp [ exp ]
postfix_exp := postfix_exp ( argument_exp_list )
postfix_exp := postfix_exp ( )
postfix_exp := postfix_exp . id
postfix_exp := postfix_exp -> id
postfix_exp := postfix_exp ++
postfix_exp := postfix_exp --

primary_exp := id
primary_exp := _const
primary_exp := string
primary_exp := ( exp )

argument_exp_list := assignment_exp
argument_exp_list := argument_exp_list , assignment_exp

_const := int_const
_const := complex_const
_const := float_const
_const := char_const