$
S'
#
:=
43
int_const char_const float_const id string complex_const ( ) { }
[ ] ; , < > <= >= else -
+ ++ -- != && / = * ! ==
for char return break || void float double long while
if int continue





S' := translation_unit

translation_unit := external_decl
translation_unit := translation_unit external_decl

external_decl := function_definition
external_decl := decl

function_definition := decl_specs declarator decl_list compound_stat
function_definition := declarator decl_list compound_stat
function_definition := decl_specs declarator compound_stat
function_definition := declarator compound_stat

decl := decl_specs init_declarator_list ;
decl := decl_specs ;

decl_list := decl
decl_list := decl_list decl



decl_specs := type_spec decl_specs
decl_specs := type_spec
decl_specs := type_qualifier decl_specs
decl_specs := type_qualifier







type_spec := void
type_spec := char

type_spec := int
type_spec := long
type_spec := float
type_spec := double
type_spec := typedef_name


















init_declarator_list := init_declarator
init_declarator_list := init_declarator_list , init_declarator

init_declarator := declarator
init_declarator := declarator = initializer



spec_qualifier_list := type_spec spec_qualifier_list
spec_qualifier_list := type_spec
spec_qualifier_list := type_qualifier spec_qualifier_list
spec_qualifier_list := type_qualifier









declarator := direct_declarator

direct_declarator := id
direct_declarator := ( declarator )
direct_declarator := direct_declarator [ const_exp ]
direct_declarator := direct_declarator [ ]
direct_declarator := direct_declarator ( param_type_list )
direct_declarator := direct_declarator ( id_list )
direct_declarator := direct_declarator ( )






type_qualifier_list := type_qualifier
type_qualifier_list := type_qualifier_list type_qualifier

param_type_list := param_list


param_list := param_decl
param_list := param_list , param_decl

param_decl := decl_specs declarator
param_decl := decl_specs abstract_declarator
param_decl := decl_specs

id_list := id
id_list := id_list , id

initializer := assignment_exp
initializer := { initializer_list }
initializer := { initializer_list , }

initializer_list := initializer
initializer_list := initializer_list , initializer

type_name := spec_qualifier_list direct_abstract_declarator
type_name := spec_qualifier_list





direct_abstract_declarator := ( direct_abstract_declarator )
direct_abstract_declarator := direct_abstract_declarator [ const_exp ]
direct_abstract_declarator := [ const_exp ]
direct_abstract_declarator := direct_abstract_declarator [ ]
direct_abstract_declarator := [ ]
direct_abstract_declarator := direct_abstract_declarator ( param_type_list )
direct_abstract_declarator := ( param_type_list )
direct_abstract_declarator := direct_abstract_declarator ( )
direct_abstract_declarator := ( )

typedef_name := id


stat := exp_stat
stat := compound_stat
stat := selection_stat
stat := iteration_stat
stat := jump_stat





exp_stat := exp ;
exp_stat := ;

compound_stat := { decl_list stat_list }
compound_stat := { stat_list }
compound_stat := { decl_list }
compound_stat := { }

stat_list := stat
stat_list := stat_list stat

selection_stat := if ( exp ) stat
selection_stat := if ( exp ) stat else stat


iteration_stat := while ( exp ) stat

iteration_stat := for ( exp ; exp ; exp ) stat









jump_stat := continue ;
jump_stat := break ;
jump_stat := return exp ;
jump_stat := return ;

exp := assignment_exp
exp := exp , assignment_exp

assignment_exp := logical_or_exp
assignment_exp := unary_exp = assignment_exp















const_exp := logical_or_exp

logical_or_exp := logical_and_exp
logical_or_exp := logical_or_exp || logical_and_exp

logical_and_exp := equality_exp
logical_and_exp := logical_and_exp && equality_exp


equality_exp := relational_exp
equality_exp := equality_exp == relational_exp
equality_exp := equality_exp != relational_exp

relational_exp := additive_exp
relational_exp := relational_exp < additive_exp
relational_exp := relational_exp > additive_exp
relational_exp := relational_exp <= additive_exp
relational_exp := relational_exp >= additive_exp





additive_exp := mult_exp
additive_exp := additive_exp + mult_exp
additive_exp := additive_exp - mult_exp

mult_exp := cast_exp
mult_exp := mult_exp * cast_exp
mult_exp := mult_exp / cast_exp


cast_exp := unary_exp
cast_exp := ( type_name ) cast_exp

unary_exp := postfix_exp
unary_exp := ++ unary_exp
unary_exp := -- unary_exp
unary_exp := unary_operator cast_exp



unary_operator := *
unary_operator := +
unary_operator := -

unary_operator := !

postfix_exp := primary_exp
postfix_exp := postfix_exp [ exp ]
postfix_exp := postfix_exp ( argument_exp_list )
postfix_exp := postfix_exp ( )


postfix_exp := postfix_exp ++
postfix_exp := postfix_exp --

primary_exp := id
primary_exp := const
primary_exp := string
primary_exp := ( exp )


argument_exp_list := assignment_exp
argument_exp_list := argument_exp_list , assignment_exp

const := int_const
const := complex_const
const := float_const
const := char_const